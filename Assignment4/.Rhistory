#Keep 'optPrice' here so we can see your optimal price
optPrice
#INSERT CODE HERE
thisLM = lm(log(units)~price*isFeature,data=mydf)
possiblePrices = data.frame(price = seq(0,10,.01), isFeature = TRUE)
possiblePrices$predictedDemand = exp(predict(thisLM,possiblePrices))
average_margin = mean(df$marginalCost)
possiblePrices$profitMargin = possiblePrices$price - average_margin
possiblePrices$profit = possiblePrices$profitMargin * possiblePrices$predictedDemand
optPrice = possiblePrices[which.max(possiblePrices$profit),]$price
#Keep 'optPrice' here so we can see your optimal price
optPrice
summary(thisLM)
#INSERT CODE HERE
setwd("/Users/fanfan/Documents/2022fallb/GBA436R/Assignment4")
df = read.csv('Homework 4 Data - 436(R).csv')
mydf = df[df$brand == 9, ]
mydf ### In this case, I only analyze the data with the same brand digit as my student id
#INSERT CODE HERE
thisLM = lm(log(units)~price+isFeature,data=mydf)
summary(thisLM)
#INSERT CODE HERE
possiblePrices = data.frame(price = seq(0,10,.01),isFeature = FALSE)
#INSERT CODE HERE
possiblePrices$predictedDemand = exp(predict(thisLM,possiblePrices))
possiblePrices
#INSERT CODE HERE
average_margin = mean(mydf$marginalCost)
possiblePrices$profitMargin = possiblePrices$price - average_margin
#INSERT CODE HERE
possiblePrices$profit = possiblePrices$profitMargin * possiblePrices$predictedDemand
#INSERT CODE HERE
#Keep 'optPrice' here so we can see your optimal price
optPrice = possiblePrices[which.max(possiblePrices$profit),]$price
optPrice
#INSERT CODE HERE
thisLM = lm(log(units)~price,data=mydf)
possiblePrices = data.frame(price = seq(0,10,.01))
possiblePrices$predictedDemand = exp(predict(thisLM,possiblePrices))
average_margin = mean(mydf$marginalCost)
possiblePrices$profitMargin = possiblePrices$price - average_margin
possiblePrices$profit = possiblePrices$profitMargin * possiblePrices$predictedDemand
optPrice = possiblePrices[which.max(possiblePrices$profit),]$price
#Keep 'optPrice' here so we can see your optimal price
optPrice
#INSERT CODE HERE
thisLM = lm(log(units)~price*isFeature,data=mydf)
possiblePrices = data.frame(price = seq(0,10,.01), isFeature = TRUE)
possiblePrices$predictedDemand = exp(predict(thisLM,possiblePrices))
average_margin = mean(mydf$marginalCost)
possiblePrices$profitMargin = possiblePrices$price - average_margin
possiblePrices$profit = possiblePrices$profitMargin * possiblePrices$predictedDemand
optPrice = possiblePrices[which.max(possiblePrices$profit),]$price
#Keep 'optPrice' here so we can see your optimal price
optPrice
summary(thisLM)
#INSERT CODE HERE
setwd("/Users/fanfan/Documents/2022fallb/GBA436R/Assignment4")
df = read.csv('Homework 4 Data - 436(R).csv')
mydf = df[df$brand == 1, ]
mydf ### In this case, I only analyze the data with the same brand digit as my student id
#INSERT CODE HERE
thisLM = lm(log(units)~price+isFeature,data=mydf)
summary(thisLM)
#INSERT CODE HERE
possiblePrices = data.frame(price = seq(0,10,.01),isFeature = FALSE)
#INSERT CODE HERE
possiblePrices$predictedDemand = exp(predict(thisLM,possiblePrices))
possiblePrices
#INSERT CODE HERE
average_margin = mean(mydf$marginalCost)
possiblePrices$profitMargin = possiblePrices$price - average_margin
#INSERT CODE HERE
possiblePrices$profit = possiblePrices$profitMargin * possiblePrices$predictedDemand
#INSERT CODE HERE
#Keep 'optPrice' here so we can see your optimal price
optPrice = possiblePrices[which.max(possiblePrices$profit),]$price
optPrice
#INSERT CODE HERE
thisLM = lm(log(units)~price,data=mydf)
possiblePrices = data.frame(price = seq(0,10,.01))
possiblePrices$predictedDemand = exp(predict(thisLM,possiblePrices))
average_margin = mean(mydf$marginalCost)
possiblePrices$profitMargin = possiblePrices$price - average_margin
possiblePrices$profit = possiblePrices$profitMargin * possiblePrices$predictedDemand
optPrice = possiblePrices[which.max(possiblePrices$profit),]$price
#Keep 'optPrice' here so we can see your optimal price
optPrice
#INSERT CODE HERE
thisLM = lm(log(units)~price*isFeature,data=mydf)
possiblePrices = data.frame(price = seq(0,10,.01), isFeature = TRUE)
possiblePrices$predictedDemand = exp(predict(thisLM,possiblePrices))
average_margin = mean(mydf$marginalCost)
possiblePrices$profitMargin = possiblePrices$price - average_margin
possiblePrices$profit = possiblePrices$profitMargin * possiblePrices$predictedDemand
optPrice = possiblePrices[which.max(possiblePrices$profit),]$price
#Keep 'optPrice' here so we can see your optimal price
optPrice
summary(thisLM)
#INSERT CODE HERE
setwd("/Users/fanfan/Documents/2022fallb/GBA436R/Assignment4")
df = read.csv('Homework 4 Data - 436(R).csv')
mydf = df[df$brand == 2, ]
mydf ### In this case, I only analyze the data with the same brand digit as my student id
#INSERT CODE HERE
thisLM = lm(log(units)~price+isFeature,data=mydf)
summary(thisLM)
#INSERT CODE HERE
possiblePrices = data.frame(price = seq(0,10,.01),isFeature = FALSE)
#INSERT CODE HERE
possiblePrices$predictedDemand = exp(predict(thisLM,possiblePrices))
possiblePrices
#INSERT CODE HERE
average_margin = mean(mydf$marginalCost)
possiblePrices$profitMargin = possiblePrices$price - average_margin
#INSERT CODE HERE
possiblePrices$profit = possiblePrices$profitMargin * possiblePrices$predictedDemand
#INSERT CODE HERE
#Keep 'optPrice' here so we can see your optimal price
optPrice = possiblePrices[which.max(possiblePrices$profit),]$price
optPrice
#INSERT CODE HERE
thisLM = lm(log(units)~price,data=mydf)
possiblePrices = data.frame(price = seq(0,10,.01))
possiblePrices$predictedDemand = exp(predict(thisLM,possiblePrices))
average_margin = mean(mydf$marginalCost)
possiblePrices$profitMargin = possiblePrices$price - average_margin
possiblePrices$profit = possiblePrices$profitMargin * possiblePrices$predictedDemand
optPrice = possiblePrices[which.max(possiblePrices$profit),]$price
#Keep 'optPrice' here so we can see your optimal price
optPrice
#INSERT CODE HERE
thisLM = lm(log(units)~price*isFeature,data=mydf)
possiblePrices = data.frame(price = seq(0,10,.01), isFeature = TRUE)
possiblePrices$predictedDemand = exp(predict(thisLM,possiblePrices))
average_margin = mean(mydf$marginalCost)
possiblePrices$profitMargin = possiblePrices$price - average_margin
possiblePrices$profit = possiblePrices$profitMargin * possiblePrices$predictedDemand
optPrice = possiblePrices[which.max(possiblePrices$profit),]$price
#Keep 'optPrice' here so we can see your optimal price
optPrice
summary(thisLM)
#INSERT CODE HERE
setwd("/Users/fanfan/Documents/2022fallb/GBA436R/Assignment4")
df = read.csv('Homework 4 Data - 436(R).csv')
mydf = df[df$brand == 2, ]
mydf ### In this case, I only analyze the data with the same brand digit as my student id
#INSERT CODE HERE
thisLM = lm(log(units)~price+isFeature,data=mydf)
summary(thisLM)
#INSERT CODE HERE
possiblePrices = data.frame(price = seq(0,10,.01),isFeature = FALSE)
#INSERT CODE HERE
possiblePrices$predictedDemand = exp(predict(thisLM,possiblePrices))
possiblePrices
#INSERT CODE HERE
average_margin = mean(mydf$marginalCost)
possiblePrices$profitMargin = possiblePrices$price - average_margin
#INSERT CODE HERE
possiblePrices$profit = possiblePrices$profitMargin * possiblePrices$predictedDemand
#INSERT CODE HERE
#Keep 'optPrice' here so we can see your optimal price
optPrice = possiblePrices[which.max(possiblePrices$profit),]
optPrice
#INSERT CODE HERE
thisLM = lm(log(units)~price,data=mydf)
possiblePrices = data.frame(price = seq(0,10,.01))
possiblePrices$predictedDemand = exp(predict(thisLM,possiblePrices))
average_margin = mean(mydf$marginalCost)
possiblePrices$profitMargin = possiblePrices$price - average_margin
possiblePrices$profit = possiblePrices$profitMargin * possiblePrices$predictedDemand
optPrice = possiblePrices[which.max(possiblePrices$profit),]
#Keep 'optPrice' here so we can see your optimal price
optPrice
#INSERT CODE HERE
thisLM = lm(log(units)~price*isFeature,data=mydf)
possiblePrices = data.frame(price = seq(0,10,.01), isFeature = TRUE)
possiblePrices$predictedDemand = exp(predict(thisLM,possiblePrices))
average_margin = mean(mydf$marginalCost)
possiblePrices$profitMargin = possiblePrices$price - average_margin
possiblePrices$profit = possiblePrices$profitMargin * possiblePrices$predictedDemand
optPrice = possiblePrices[which.max(possiblePrices$profit),]
#Keep 'optPrice' here so we can see your optimal price
optPrice
summary(thisLM)
#INSERT CODE HERE
setwd("/Users/fanfan/Documents/2022fallb/GBA436R/Assignment4")
df = read.csv('Homework 4 Data - 436(R).csv')
mydf = df[df$brand == 9, ]
mydf ### In this case, I only analyze the data with the same brand digit as my student id
#INSERT CODE HERE
thisLM = lm(log(units)~price+isFeature,data=mydf)
summary(thisLM)
#INSERT CODE HERE
possiblePrices = data.frame(price = seq(0,10,.01),isFeature = FALSE)
#INSERT CODE HERE
possiblePrices$predictedDemand = exp(predict(thisLM,possiblePrices))
possiblePrices
#INSERT CODE HERE
average_margin = mean(mydf$marginalCost)
possiblePrices$profitMargin = possiblePrices$price - average_margin
#INSERT CODE HERE
possiblePrices$profit = possiblePrices$profitMargin * possiblePrices$predictedDemand
#INSERT CODE HERE
#Keep 'optPrice' here so we can see your optimal price
optPrice = possiblePrices[which.max(possiblePrices$profit),]
optPrice
#INSERT CODE HERE
thisLM = lm(log(units)~price,data=mydf)
possiblePrices = data.frame(price = seq(0,10,.01))
possiblePrices$predictedDemand = exp(predict(thisLM,possiblePrices))
average_margin = mean(mydf$marginalCost)
possiblePrices$profitMargin = possiblePrices$price - average_margin
possiblePrices$profit = possiblePrices$profitMargin * possiblePrices$predictedDemand
optPrice = possiblePrices[which.max(possiblePrices$profit),]
#Keep 'optPrice' here so we can see your optimal price
optPrice
#INSERT CODE HERE
thisLM = lm(log(units)~price*isFeature,data=mydf)
possiblePrices = data.frame(price = seq(0,10,.01), isFeature = TRUE)
possiblePrices$predictedDemand = exp(predict(thisLM,possiblePrices))
average_margin = mean(mydf$marginalCost)
possiblePrices$profitMargin = possiblePrices$price - average_margin
possiblePrices$profit = possiblePrices$profitMargin * possiblePrices$predictedDemand
optPrice = possiblePrices[which.max(possiblePrices$profit),]
#Keep 'optPrice' here so we can see your optimal price
optPrice
possiblePrices[possiblePrices$profit == 2.05,]
possiblePrices
possiblePrices[possiblePrices$price == 2.05,]
optPrice
possiblePrices[possiblePrices$price == 2.05,]
#INSERT CODE HERE
thisLM = lm(log(units)~price*isFeature,data=mydf)
possiblePrices = data.frame(price = seq(0,10,.01), isFeature = TRUE)
possiblePrices$predictedDemand = exp(predict(thisLM,possiblePrices))
average_margin = mean(mydf$marginalCost)
possiblePrices$profitMargin = possiblePrices$price - average_margin
possiblePrices$profit = possiblePrices$profitMargin * possiblePrices$predictedDemand
optPrice = possiblePrices[which.max(possiblePrices$profit),]
#Keep 'optPrice' here so we can see your optimal price
optPrice
summary(thisLM)
setwd("/Users/fanfan/Documents/2022fallb/GBA424/case4")
evaldf = read.csv('evals_experiment.csv')
dist = read.csv('students_experiment.csv')
head(evaldf)
head(dist)
totaldf = merge(evaldf, dist, by = student_id )
totaldf = merge(evaldf, dist, by = "student_id" )
totaldf
df$program <- ifelse(df$district == "St. Paul", "Current",
ifelse(df$district == "Lake Oswego", "A",
ifelse(df$district == "Camas", "B",
ifelse(df$district == "Riverdale", "C", NA))))
df$program <- switch(df$location,
"St. Paul" = "Current",
"Lake Oswego" = "A",
"Camas" = "B",
"Riverdale" = "C",
NA)
df$program <- switch(df$district,
"St. Paul" = "Current",
"Lake Oswego" = "A",
"Camas" = "B",
"Riverdale" = "C",
NA)
df$program <- lapply(df$district, function(x) {
switch(x,
"St. Paul" = "Current",
"Lake Oswego" = "A",
"Camas" = "B",
"Riverdale" = "C",
NA)
})
df$program = "Current"
df$program <- lapply(df$district, function(x) {
switch(x,
"St. Paul" = "Current",
"Lake Oswego" = "A",
"Camas" = "B",
"Riverdale" = "C",
NA)
})
lapply(df$district, function(x) {
switch(x,
"St. Paul" = "Current",
"Lake Oswego" = "A",
"Camas" = "B",
"Riverdale" = "C",
NA)
})
totaldfdf$program = "Current"
totaldf$program = "Current"
totaldf$program <- lapply(totaldfdf$district, function(x) {
switch(x,
"St. Paul" = "Current",
"Lake Oswego" = "A",
"Camas" = "B",
"Riverdale" = "C",
NA)
})
totaldf$program = "Current"
totaldf$program <- lapply(totaldf$district, function(x) {
switch(x,
"St. Paul" = "Current",
"Lake Oswego" = "A",
"Camas" = "B",
"Riverdale" = "C",
NA)
})
totaldf
setwd("/Users/fanfan/Documents/2022fallb/GBA424/case4")
evaldf = read.csv('evals_experiment.csv')
dist = read.csv('students_experiment.csv')
head(evaldf)
head(dist)
totaldf = merge(evaldf, dist, by = "student_id" )
totaldf
totaldf$program <- lapply(totaldf$district, function(x) {
switch(x,
"St. Paul" = "Current",
"Lake Oswego" = "A",
"Camas" = "B",
"Riverdale" = "C",
NA)
})
totaldf
totaldf$program <- switch(totaldf$district,
"St. Paul" = "Current",
"Lake Oswego" = "A",
"Camas" = "B",
"Riverdale" = "C",
NA)
totaldf$program <- lapply(totaldf$district, function(x) {
switch(totaldf$district,
"St. Paul" = "Current",
"Lake Oswego" = "A",
"Camas" = "B",
"Riverdale" = "C",
NA)
})
totaldf$program <- lapply(totaldf$district, function(x) {
switch(x,
"St. Paul" = "Current",
"Lake Oswego" = "A",
"Camas" = "B",
"Riverdale" = "C",
NA)
})
totaldf$program = lapply(totaldf$district, function(x) {
switch(x,
"St. Paul" = "Current",
"Lake Oswego" = "A",
"Camas" = "B",
"Riverdale" = "C",
NA)
})
totaldf
totaldf
setwd("/Users/fanfan/Documents/2022fallb/GBA424/case4")
evaldf = read.csv('evals_experiment.csv')
dist = read.csv('students_experiment.csv')
head(evaldf)
head(dist)
totaldf = merge(evaldf, dist, by = "student_id" )
totaldf
totaldf$program = lapply(totaldf$district, function(x) {
switch(x,
"St. Paul" = "Current",
"Lake Oswego" = "A",
"Camas" = "B",
"Riverdale" = "C",
NA)
})
totaldf
View(totaldf)
totaldf$program = unlist(lapply(totaldf$district, function(x) {
switch(x,
"St. Paul" = "Current",
"Lake Oswego" = "A",
"Camas" = "B",
"Riverdale" = "C",
NA)
}))
totaldf
###### Transfer the location to the program
totaldf$program = unlist(lapply(totaldf$district, function(x) {
switch(x,
"St. Paul" = "Current",
"Lake Oswego" = "A",
"Camas" = "B",
"Riverdale" = "C",
NA)
}))
totaldf$totalscore = totaldf$score_reading + totaldf$score_writing + totaldf$score_mathNoCalc+totaldf$score_mathCalc
totaldf
setwd("/Users/fanfan/Documents/2022fallb/GBA424/case4")
evaldf = read.csv('evals_experiment.csv')
dist = read.csv('students_experiment.csv')
head(evaldf)
head(dist)
totaldf = merge(evaldf, dist, by = "student_id" )
totaldf
###### Transfer the location to the program
totaldf$education = unlist(lapply(totaldf$district, function(x) {
switch(x,
"St. Paul" = "Current",
"Lake Oswego" = "A",
"Camas" = "B",
"Riverdale" = "C",
NA)
}))
totaldf$totalscore = totaldf$score_reading + totaldf$score_writing + totaldf$score_mathNoCalc+totaldf$score_mathCalc
totaldf
tscore = lm(totalscore~program+education+program*education, data = totaldf)
setwd("/Users/fanfan/Documents/2022fallb/GBA424/case4")
evaldf = read.csv('evals_experiment.csv')
dist = read.csv('students_experiment.csv')
head(evaldf)
head(dist)
totaldf = merge(evaldf, dist, by = "student_id" )
totaldf
###### Transfer the location to the program
totaldf$education = unlist(lapply(totaldf$district, function(x) {
switch(x,
"St. Paul" = "Current",
"Lake Oswego" = "A",
"Camas" = "B",
"Riverdale" = "C",
NA)
}))
totaldf$totalscore = totaldf$score_reading + totaldf$score_writing + totaldf$score_mathNoCalc+totaldf$score_mathCalc
totaldf
tscore = lm(totalscore~program*education, data = totaldf)
summary(tscore)
tscore = lm(totalscore~program*education, data = totaldf, intercept = "Current")
summary(tscore)
tscore = lm(totalscore~program*relevel(education,"Current"), data = totaldf)
tscore = lm(totalscore~program*relevel(education,ref = "Current"), data = totaldf)
tscore = lm(totalscore~program*factor(education), data = totaldf)
summary(tscore)
tscore = lm(totalscore~program*factor(education), data = totaldf)
tscore = relevel(tscore, ref = "Current")
### A and current
tempdf = totaldf[totaldf$education %isin% c("A","Current"),]
### A and current
tempdf = totaldf[totaldf$education %in% c("A","Current"),]
tempdf
### A and current
tempdf = totaldf[totaldf$education %in% c("A","Current"),]
tscore = lm(totalscore~program*education, data = tempdf)
summary(tscore)
summary(Ascore)
### A and current
tempdf = totaldf[totaldf$education %in% c("A","Current"),]
Ascore = lm(totalscore~program*education, data = tempdf)
summary(Ascore)
### B and current
tempdf = totaldf[totaldf$education %in% c("B","Current"),]
Bscore = lm(totalscore~program*education, data = tempdf)
summary(Bscore)
### C and current
tempdf = totaldf[totaldf$education %in% c("C","Current"),]
Cscore = lm(totalscore~program*education, data = tempdf)
summary(Cscore)
func = function(comp, y){
tempdf = totaldf[totaldf$education %in% c(comp,"Current"),]
Ascore = lm(y~program*education, data = tempdf)
summary(Ascore)
}
### A and current
tempdf = totaldf[totaldf$education %in% c("A","Current"),]
Ascore = lm(totalscore~program*education, data = tempdf)
summary(Ascore)
### B and current
tempdf = totaldf[totaldf$education %in% c("B","Current"),]
Bscore = lm(totalscore~program*education, data = tempdf)
summary(Bscore)
### C and current
tempdf = totaldf[totaldf$education %in% c("C","Current"),]
Cscore = lm(totalscore~program*education, data = tempdf)
summary(Cscore)
func("A",totalscore)
func = function(comp, y){
tempdf = totaldf[totaldf$education %in% c(comp,"Current"),]
Ascore = lm(I(y)~program*education, data = tempdf)
summary(Ascore)
}
func("A",totalscore)
func = function(comp, y){
tempdf = totaldf[totaldf$education %in% c(comp,"Current"),]
Ascore = lm(eval(parse(text = y))~program*education, data = tempdf)
summary(Ascore)
}
func("A",totalscore)
s = 6
y = "s"
eval(parse(text = y))
func("A","totalscore")
func("A","score_reading")
func("A","score_writing")
func("A","score_mathNoCalc")
func("A","score_mathCalc")
func("B","score_reading")
func("B","score_writing")
func("B","score_mathNoCalc")
func("B","score_mathCalc")
func("C","score_reading")
func("C","score_writing")
func("C","score_mathNoCalc")
func("C","score_mathCalc")
